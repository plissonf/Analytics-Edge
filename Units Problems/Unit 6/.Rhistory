fit <- lm(formula,data=d)
coeff <- coef(fit)
return(coeff)
}
results <- boot(data=Xy, statistic=lm.fn, R=1000, formula=y~X1+X2)
results
new.rows = c(101:200, 401:500, 101:200, 901:1000, 301:400, 1:100, 1:100, 801:900, 201:300, 701:800)
new.Xy = Xy[new.rows, ]
results <- boot(data=new.Xy, statistic=lm.fn, R=1000, formula=y~X1+X2)
results
library(ISLR)
summary(Hitters)
points(10, reg.summary$cp[10], pch=20, col="red")
library(leaps)
regfit.full=regsubsets(Salary~., data=Hitters)
reg.summary=summary(regfit.full)
regfit.full=regsubsets(Salary~., data=Hitters, nvmax=19)
library(ISLR)
summary(Hitters)
```
There as some missing values here, so before we proceed we will remove them:
```{r, echo=FALSE}
Hitters = na.omit(Hitters)
with(Hitters, um(is.na(Salary)))
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```{r}
library(leaps)
regfit.full=regsubsets(Salary~., data=Hitters)
reg.summary=summary(regfit.full)
regfit.full=regsubsets(Salary~., data=Hitters, nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
plot(reg.summary$cp, xlab="Number of Variables", ylab="Cp")
which.min(reg.summary$cp)
points(10, reg.summary$cp[10], pch=20, col="red")
```
library(glmnet)
install.packages("glmnet")
cv.glmnet()
??cv.glmnet()
sd(c(5,8,12))
which.min(c(4,1,6))
library(readr)
library(ggmap)
install.packages(c("readr", "ggmap"))
View(new.Xy)
View(new.Xy)
View(new.Xy)
library(ggmap)
ggtitle("Distribution of Mosquito Counts (Log Scale")
library(readr)
library(ggmap)
data_dir <- "../input"
train <- read_csv(file.path(data_dir, "train.csv"))
mapdata <- readRDS(file.path(data_dir, "mapdata_copyright_openstreetmap_contributors.rds"))
train$Date <- as.Date(train$Date)
counts_by_date <- train %>% group_by(Date) %>% summarise(NumMeasurements = n()) %>% arrange(desc(NumMeasurements)) %>% head
counts_by_date
date_to_show <- counts_by_date$Date[1]
single_date_grouped_by_location <- train %>%
filter(Date == "2007-08-01") %>%
group_by(Longitude, Latitude) %>%
summarize(NumMosquitos = sum(NumMosquitos))
qplot(single_date_grouped_by_location$NumMosquitos) +
scale_x_log10() +
xlab("Number of Mosquitos") +
ylab("Number of test sites w/ this many mosquitos") +
ggtitle("Distribution of Mosquito Counts (Log Scale")
library(readr)
library(ggmap)
data_dir <- "../input"
train <- read_csv(file.path(data_dir, "train.csv"))
mapdata <- readRDS(file.path(data_dir, "mapdata_copyright_openstreetmap_contributors.rds"))
train$Date <- as.Date(train$Date)
counts_by_date <- train %>% group_by(Date) %>% summarise(NumMeasurements = n()) %>% arrange(desc(NumMeasurements)) %>% head
counts_by_date
date_to_show <- counts_by_date$Date[1]
library(readr)
library(ggmap)
data_dir <- "../input"
train <- read_csv(file.path(data_dir, "train.csv"))
mapdata <- readRDS(file.path(data_dir, "mapdata_copyright_openstreetmap_contributors.rds"))
train$Date <- as.Date(train$Date)
counts_by_date <- train %>% group_by(Date) %>% summarise(NumMeasurements = n()) %>% arrange(desc(NumMeasurements)) %>% head
counts_by_date
date_to_show <- counts_by_date$Date[1]
library(ggmap)
data_dir <- "../input"
train <- read_csv(file.path(data_dir, "train.csv"))
mapdata <- readRDS(file.path(data_dir, "mapdata_copyright_openstreetmap_contributors.rds"))
train$Date <- as.Date(train$Date)
counts_by_date <- train %>% group_by(Date) %>% summarise(NumMeasurements = n()) %>% arrange(desc(NumMeasurements)) %>% head
counts_by_date
date_to_show <- counts_by_date$Date[1]
single_date_grouped_by_location <- train %>%
filter(Date == "2007-08-01") %>%
group_by(Longitude, Latitude) %>%
summarize(NumMosquitos = sum(NumMosquitos))
qplot(single_date_grouped_by_location$NumMosquitos) +
scale_x_log10() +
xlab("Number of Mosquitos") +
ylab("Number of test sites w/ this many mosquitos") +
ggtitle("Distribution of Mosquito Counts (Log Scale")
ggmap(mapdata) +
geom_point(aes(x=Longitude, y=Latitude, color=NumMosquitos), size=3, data=single_date_grouped_by_location) +
scale_color_continuous(trans="log") +
citation()
setwd("./Desktop/Analytics Edge/Unit 6/")
dailykos <- read.csv("./dailykos.csv")
str(dailykos)
dailykosMatrix <- as.matrix(dailykos)
str(dailykosMatrix)
dailykosVector <- as.vector(dailykosMatrix)
str(dailykosVector)
distance = dist(dailykos, method = "euclidean")
ClusterIntensity = hclust(distance, method="ward.D")
plot(ClusterIntensity)
rect.hclust(ClusterIntensity, k = 7, border = "red")
dailykosClusters = cutree(ClusterIntensity, k = 7)
dailykosClusters
tapply(dailykos, dailykosClusters, mean)
tapply(dailykos, dailykosClusters)
table(dailykosClusters)
tail(sort(colMeans(dailykosClusters1)))
cluster1 = subset(dailykos, dailykosClusters==1)
str(cluster1)
tail(sort(colMeans(cluster1)))
cluster2 = subset(dailykos, dailykosClusters==2)
str(cluster2)
tail(sort(colMeans(HierCluster2)))
tail(sort(colMeans(cluster2)))
cluster3 = subset(dailykos, dailykosClusters==3)
cluster4 = subset(dailykos, dailykosClusters==4)
cluster5 = subset(dailykos, dailykosClusters==5)
cluster6 = subset(dailykos, dailykosClusters==6)
cluster7 = subset(dailykos, dailykosClusters==7)
subset(movies, Title=="Men in Black (1997)")
clusterGroups[257]
subset(dailykos, Title=="Iraq war")
subset(dailykos, word=="Iraq war")
subset(dailykos, word=="Iraq")
str(dailykos)
subset(dailykos, word=="iraq war")
subset(dailykos, word=="iraq war")
subset(dailykos, word=="iraq")
subset(dailykos, word=="democratic")
dailykosClusters[722]
subset(dailykos, word=="democratic")
dailykos[1:546]
sub <- subset(dailykos[1:546])
sub
subset(dailykos, word=="democratic")
head(dailykos)
head(dailykos)
str(dailykos)
dailykos$democratic
dailykos$iraq
dailykos$democrate
dailykos$democrat
subset(dailykos, word=="democrate")
dailykos$democrate
dailykos$democrate
subset(dailykos, word=="democrat")
dailykos$democrat
cluster7 = subset(dailykos, dailykosClusters==7)
cluster6 = subset(dailykos, dailykosClusters==6)
cluster5 = subset(dailykos, dailykosClusters==5)
cluster4 = subset(dailykos, dailykosClusters==4)
cluster3 = subset(dailykos, dailykosClusters==3)
tapply(dailykos$iraq, dailykosClusters, mean)
tapply(dailykos$democrat, dailykosClusters, mean)
tapply(dailykos$kerry, dailykosClusters, mean)
tapply(dailykos$dean, dailykosClusters, mean)
tapply(dailykos$edwards, dailykosClusters, mean)
tapply(dailykos$edwards, dailykosClusters, mean)
tapply(dailykos$iraq, dailykosClusters, max)
KMC = kmeans(dailykos, centers = k)
k=7
set.seed(1000)
KMC = kmeans(dailykos, centers = k)
str(KMC)
dailykosClusters <- KMC$cluster
KMC$centers[3]
dailykosClusters
summary(dailykosClusters)
table(dailykosClusters)
cluster1 = subset(dailykos, dailykosClusters==1)
cluster2 = subset(dailykos, dailykosClusters==2)
cluster3 = subset(dailykos, dailykosClusters==3)
cluster4 = subset(dailykos, dailykosClusters==4)
cluster5 = subset(dailykos, dailykosClusters==5)
cluster6 = subset(dailykos, dailykosClusters==6)
cluster7 = subset(dailykos, dailykosClusters==7)
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
ClusterIntensity = hclust(distance, method="ward.D")
dailykosClusters = cutree(ClusterIntensity, k = 7)
dailykosClusters
hcluster1 = subset(dailykos, dailykosClusters==1)
str(hcluster1)
hcluster2 = subset(dailykos, dailykosClusters==2)
dailykosHClusters = cutree(ClusterIntensity, k = 7)
dailykosHClusters
table(dailykosHClusters)
hcluster1 = subset(dailykos, dailykosHClusters==1)
hcluster2 = subset(dailykos, dailykosHClusters==2)
hcluster3 = subset(dailykos, dailykosHClusters==3)
hcluster4 = subset(dailykos, dailykosHClusters==4)
hcluster5 = subset(dailykos, dailykosHClusters==5)
hcluster6 = subset(dailykos, dailykosHClusters==6)
hcluster7 = subset(dailykos, dailykosHClusters==7)
dailykosClusters <- KMC$cluster
table(dailykosClusters)
kmcluster1 = subset(dailykos, dailykosClusters==1)
kmcluster2 = subset(dailykos, dailykosClusters==2)
kmcluster3 = subset(dailykos, dailykosClusters==3)
kmcluster4 = subset(dailykos, dailykosClusters==4)
kmcluster5 = subset(dailykos, dailykosClusters==5)
kmcluster6 = subset(dailykos, dailykosClusters==6)
kmcluster7 = subset(dailykos, dailykosClusters==7)
table(hcluster2, kmcluster2)
hcluster1
table(kmcluster2)
str(kmcluster2)
subset(dailykos, Title=="iraq")
dailykos$iraq
head(dailykos$iraq)
table(dailykosHClusters, dailykosClusters)
AirlinesClusters <- read.csv("./AirlinesClusters.csv")
getwd()
setwd("./Desktop/Analytics Edge/Unit 6/")
AirlinesCluster <- read.csv("./AirlinesCluster.csv")
str(AirlinesCluster)
airlines <- read.csv("./AirlinesCluster.csv")
str(airlines)
summary(airlines)
install.packages("caret")
library(caret)
preproc = preProcess(airlines)
airlinesNorm = predict(preproc, airlines)
summary(airlinesNorm)
sd(airlinesNorm)
airlinesDist = dist(airlinesNorm, method = "euclidean")
ClusterIntensity = hclust(airlinesDist, method="ward.D")
plot(ClusterIntensity)
clusterGroups = cutree(ClusterIntensity, k = 5)
clusterGroups
table(clusterGroups)
tapply(airlines$Balance, clusterGroups, mean)
tapply(airlines$QualMiles, clusterGroups, mean)
tapply(airlines$BonusMiles, clusterGroups, mean)
tapply(airlines$BonusTrans, clusterGroups, mean)
tapply(airlines$FlightTrans, clusterGroups, mean)
tapply(airlines$FlightMiles, clusterGroups, mean)
tapply(airlines$DaysSinceEnroll, clusterGroups, mean)
k=5
set.seed(88)
kmeans = kmeans(airlinesNorm, centers = k)
str(kmeans)
kmeans = kmeans(airlinesNorm, centers = k, iter.max = 1000)
str(kmeans)
kmeansClust = kmeans$cluster
kmeansClust$centers
kmeansClust
str(kmeans)
table(kmeans)
table(kmeans$cluster)
kmeansClust
kmeansClust$centers
table(kmeansClust$centers)
kmcluster1 = subset(airlinesNorm, kmeansClust==1)
kmcluster2 = subset(airlinesNorm, kmeansClust==2)
kmcluster3 = subset(airlinesNorm, kmeansClust==3)
kmcluster4 = subset(airlinesNorm, kmeansClust==4)
kmcluster5 = subset(airlinesNorm, kmeansClust==5)
kmcluster1
summary(kmcluster1)
table(kmeans$cluster)
stocks <- read.csv("./StocksCluster.csv")
str(stocks)
str(stocks$PositiveDec)
table(stocks$PositiveDec)
6324/(6324+5256)
corr(stocks)
cor(stocks)
summary(stocks)
tapply(stocks, mean)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~., data=stocksTrain, family=binomial)
summary(StocksModel)
predictTrain = predict(StocksModel, type="response")
tapply(predictTrain, stocksTrain$PositiveDec, mean)
table(stocksTrain$PositiveDec, predictTrain > 0.5)
(990+3640)/nrows(stocksTrain)
(990+3640)/(990+2689+787+3640)
table(stocksTest$PositiveDec, predictTrain > 0.5)
StocksModel2 = glm(PositiveDec ~., data=stocksTest, family=binomial)
predictTest = predict(StocksModel2, type="response")
table(stocksTest$PositiveDec, predictTrain > 0.5)
table(stocksTest$PositiveDec, predictTest > 0.5)
(455+1526)/(455+1122+371+1526)
predictTest = predict(StocksModel, type="response")
table(stocksTest$PositiveDec, predictTest > 0.5)
StocksModel = glm(PositiveDec ~., data=stocksTrain, family=binomial)
summary(StocksModel)
table(stocksTrain$PositiveDec, predictTrain > 0.5)
predictTest = predict(StocksModel, type="response")
table(stocksTest$PositiveDec, predictTest > 0.5)
table(stocksTest$PositiveDec, predictTrain > 0.5)
table(stocksTrain$PositiveDec, predictTest > 0.5)
StocksModel = glm(PositiveDec ~., data=stocksTrain, family=binomial)
StocksModel = glm(PositiveDec ~., data=stocksTest, family=binomial)
predictTest = predict(StocksModel, type="response")
table(stocksTest$PositiveDec, predictTest > 0.5)
(455+1526)/(455+1122+371+1526)
predictTest = predict(StocksModel, type="response")
StocksModel = glm(PositiveDec ~., data=stocksTest, family=binomial)
predictTest = predict(StocksModel, type="response")
table(stocksTest$PositiveDec, predictTest > 0.5)
StocksModel = glm(PositiveDec ~., data=stocksTrain, family=binomial)
predictTest = predict(StocksModel, type="response")
table(stocksTest$PositiveDec, predictTest > 0.5)
table(stocksTest$PositiveDec)
1897 / (1577+1897)
table(stocksTest$PositiveDec, predictTrain > 0.5)
table(stocksTest$PositiveDec, predictTest > 0.5)
StocksModel = glm(PositiveDec ~., data=stocksTrain, family=binomial)
StocksModel = glm(PositiveDec ~., data=stocksTrain, family=binomial)
predictTest = predict(StocksModel, type="response", newdata=stocksTest)
table(stocksTest$PositiveDec, predictTest > 0.5)
(417+1553)/(417+1160+344+1553)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
tapply(normTrain$ReturnJan, mean)
summary(normTrain$ReturnJan)
summary(normTest$ReturnJan)
k=3
set.seed(144)
km = kmeans(normTrain, centers = k, iter.max = 1000)
str(km)
table(km$cluster)
library(flexclust)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata=normTest)
table(clusterTest)
kmclust = km$cluster
stocksTrain1 = subset(stocksTrain, kmcluster==1)
stocksTrain1 = subset(stocksTrain, kmclust==1)
stocksTrain2 = subset(stocksTrain, kmclust==2)
stocksTrain3 = subset(stocksTrain, kmclust==3)
stocksTest1 = subset(stocksTest, kmclust==1)
stocksTest2 = subset(stocksTest, kmclust==2)
stocksTest3 = subset(stocksTest, kmclust==3)
stocksTrain1
summary(stocksTrain1)
table(stocksTrain1, stocksTrain2)
summary(stocksTrain1, mean)
summary(stocksTrain2)
summary(stocksTrain1, mean)
summary(stocksTrain3)
summary(stocksTrain1, mean)
StocksModel1 = glm(PositiveDec ~., data=stocksTrain1, family=binomial)
StocksModel2 = glm(PositiveDec ~., data=stocksTrain2, family=binomial)
StocksModel3 = glm(PositiveDec ~., data=stocksTrain3, family=binomial)
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel1)
summary(StocksModel3)
summary(StocksModel1)
summary(StocksModel1$Coeff)
StocksModel1$Coeff
StocksModel1$Coefficients
StocksModel1$coeff
StocksModel2$coeff
StocksModel3$coeff
PredictTest1 = predict(StocksModel1, type="response", newdata=stocksTest1)
table(stocksTest1$PositiveDec, PredictTest1 > 0.5)
(101+498)/(101+341+103+498)
PredictTest2 = predict(StocksModel2, type="response", newdata=stocksTest2)
table(stocksTest2$PositiveDec, PredictTest2 > 0.5)
(361+862)/(361+686+301+862)
PredictTest3 = predict(StocksModel3, type="response", newdata=stocksTest3)
table(stocksTest3$PositiveDec, PredictTest3 > 0.5)
(69+39)/(69+19+94+39)
StocksModel1 = glm(PositiveDec ~., data=stocksTrain1, family=binomial)
StocksModel2 = glm(PositiveDec ~., data=stocksTrain2, family=binomial)
StocksModel3 = glm(PositiveDec ~., data=stocksTrain3, family=binomial)
PredictTest1 = predict(StocksModel1, type="response", newdata=stocksTest1)
table(stocksTest1$PositiveDec, PredictTest1 > 0.5)
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
table(AllOutcomes, AllPredictions > 0.5)
(531+1399)/(531+1046+498+1399)
PredictTest1 = predict(StocksModel1, type="response", newdata=stocksTest1)
table(stocksTest1$PositiveDec, PredictTest1 >= 0.5)
(101+498)/(101+341+103+498)
stocksTrain1 = subset(stocksTrain, kmclust==1)
stocksTrain2 = subset(stocksTrain, kmclust==2)
stocksTrain3 = subset(stocksTrain, kmclust==3)
stocksTest1 = subset(stocksTest, kmclust==1)
stocksTest2 = subset(stocksTest, kmclust==2)
stocksTest3 = subset(stocksTest, kmclust==3)
StocksModel1 = glm(PositiveDec ~., data=stocksTrain1, family=binomial)
StocksModel2 = glm(PositiveDec ~., data=stocksTrain2, family=binomial)
StocksModel3 = glm(PositiveDec ~., data=stocksTrain3, family=binomial)
PredictTest1 = predict(StocksModel1, type="response", newdata=stocksTest1)
table(stocksTest1$PositiveDec, PredictTest1 >= 0.5)
PredictTest2 = predict(StocksModel2, type="response", newdata=stocksTest2)
table(stocksTest2$PositiveDec, PredictTest2 > 0.5)
(361+862)/(361+686+301+862)
PredictTest2 = predict(StocksModel2, type="response")
table(stocksTest2$PositiveDec, PredictTest2 > 0.5)
(436+734)/(436+611+429+734)
PredictTest1 = predict(StocksModel1, type="response", newdata=stocksTest1)
stocksTrain1 = subset(stocksTrain, kmclust==1)
stocksTrain2 = subset(stocksTrain, kmclust==2)
stocksTrain3 = subset(stocksTrain, kmclust==3)
stocksTest1 = subset(stocksTest, kmclust==1)
stocksTest2 = subset(stocksTest, kmclust==2)
stocksTest3 = subset(stocksTest, kmclust==3)
kmclust = km$cluster
summary(stocksTrain1)
summary(stocksTrain2)
summary(stocksTrain3)
PredictTest1 = predict(StocksModel1, type="response", newdata=stocksTest1)
table(stocksTest1$PositiveDec, PredictTest1 >= 0.5)
kmclust2 = km.kcca$cluster
kmclust = km$cluster
km = kmeans(stocksTrain, centers = k, iter.max = 1000)
str(km)
table(km$cluster)
kmclust = km$cluster
stocksTrain1 = subset(stocksTrain, kmclust==1)
stocksTrain2 = subset(stocksTrain, kmclust==2)
stocksTrain3 = subset(stocksTrain, kmclust==3)
stocksTest1 = subset(stocksTest, kmclust==1)
stocksTest2 = subset(stocksTest, kmclust==2)
stocksTest3 = subset(stocksTest, kmclust==3)
StocksModel1 = glm(PositiveDec ~., data=stocksTrain1, family=binomial)
StocksModel2 = glm(PositiveDec ~., data=stocksTrain2, family=binomial)
StocksModel3 = glm(PositiveDec ~., data=stocksTrain3, family=binomial)
PredictTest1 = predict(StocksModel1, type="response", newdata=stocksTest1)
table(stocksTest1$PositiveDec, PredictTest1 >= 0.5)
214/(243+214)
243/(243+214)
km = kmeans(normTrain, centers = k, iter.max = 1000)
km = kmeans(limitedTrain, centers = k, iter.max = 1000)
table(km$cluster)
kmclust = km$cluster
stocksTrain1 = subset(stocksTrain, kmclust==1)
stocksTrain2 = subset(stocksTrain, kmclust==2)
stocksTrain3 = subset(stocksTrain, kmclust==3)
stocksTest1 = subset(stocksTest, kmclust==1)
stocksTest2 = subset(stocksTest, kmclust==2)
stocksTest3 = subset(stocksTest, kmclust==3)
StocksModel1 = glm(PositiveDec ~., data=stocksTrain1, family=binomial)
StocksModel2 = glm(PositiveDec ~., data=stocksTrain2, family=binomial)
StocksModel3 = glm(PositiveDec ~., data=stocksTrain3, family=binomial)
PredictTest1 = predict(StocksModel1, type="response", newdata=stocksTest1)
table(stocksTest1$PositiveDec, PredictTest1 >= 0.5)
(130+431)/(130+381+105+431)
PredictTest2 = predict(StocksModel2, type="response", newdata=stocksTest2)
table(stocksTest2$PositiveDec, PredictTest2 > 0.5)
(272+1019)/(272+726+237+1019)
PredictTest3 = predict(StocksModel3, type="response", newdata=stocksTest3)
table(stocksTest3$PositiveDec, PredictTest3 > 0.5)
(12+99)/(12+56+6+99)
km = kmeans(stocksTrain, centers = k, iter.max = 1000)
str(km)
table(km$cluster)
kmclust = km$cluster
stocksTrain1 = subset(stocksTrain, kmclust==1)
stocksTrain2 = subset(stocksTrain, kmclust==2)
stocksTrain3 = subset(stocksTrain, kmclust==3)
stocksTest1 = subset(stocksTest, kmclust==1)
stocksTest2 = subset(stocksTest, kmclust==2)
stocksTest3 = subset(stocksTest, kmclust==3)
StocksModel1 = glm(PositiveDec ~., data=stocksTrain1, family=binomial)
StocksModel2 = glm(PositiveDec ~., data=stocksTrain2, family=binomial)
StocksModel3 = glm(PositiveDec ~., data=stocksTrain3, family=binomial)
PredictTest1 = predict(StocksModel1, type="response", newdata=stocksTest1)
table(stocksTest1$PositiveDec, PredictTest1 >= 0.5)
0.6194145 + 0.5504808 + 0.6458333
1.815729/3
summary(PredictTest1)
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
table(AllOutcomes, AllPredictions > 0.5)
km = kmeans(normTrain, centers = k, iter.max = 1000)
str(km)
table(km$cluster)
kmclust = km$cluster
0.6194145*(1637/(1637+255+6214)) + 0.5504808*(255/(1637+255+6214)) + 0.6458333*(6214/(1637+255+6214))
